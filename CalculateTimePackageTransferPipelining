def pipelining_with_total_message_input():
    try:
        print("🎯 Υπολογιστής Καθυστέρησης Δικτύου με Pipelining (συνολικό μέγεθος σε Mbits)")

        start_point = input("📍 Δώσε το σημείο εκκίνησης (π.χ. PC, Source): ")
        num_routers = int(input("🛣️ Δώσε αριθμό δρομολογητών (routers): "))
        L_total_Mbits = float(input("💾 Δώσε το συνολικό μέγεθος του μηνύματος (σε Mbits): "))
        R = float(input("⚙️ Δώσε το ρυθμό μετάδοσης R (σε Mbps): "))
        N = int(input("📦 Δώσε τον αριθμό πακέτων: "))

        if L_total_Mbits <= 0 or R <= 0 or N <= 0 or num_routers < 0:
            print("🚨 Όλες οι τιμές πρέπει να είναι θετικές.")
            return

        # Υπολογισμός μεγέθους ανά πακέτο (σε Mbits)
        L_packet_Mbits = L_total_Mbits / N

        # Μετατροπή σε bits
        L_packet_bits = L_packet_Mbits * 1_000_000
        R_bps = R * 1_000_000

        # Χρόνος μετάδοσης ανά πακέτο
        t = L_packet_bits / R_bps

        # Hops = routers + 1 (τερματικός παραλήπτης)
        hops = num_routers + 1

        # Καθυστέρηση χωρίς pipelining
        total_no_pipeline = N * hops * t

        # Καθυστέρηση με pipelining
        total_pipeline = (N + hops - 1) * t

        # Αποτελέσματα
        print("\n📊 Αποτελέσματα:")
        print(f"🔁 Αφετηρία: {start_point}")
        print(f"🚦 Αριθμός δρομολογητών: {num_routers}")
        print(f"🧭 Αριθμός hops (ζεύξεων): {hops}")
        print(f"📦 Μέγεθος κάθε πακέτου: {L_packet_Mbits:.6f} Mbits")
        print(f"⏱️ Χρόνος μετάδοσης ανά πακέτο: {t:.6f} sec")
        print(f"🐢 Καθυστέρηση χωρίς pipelining: {total_no_pipeline:.3f} sec")
        print(f"⚡ Καθυστέρηση με pipelining: {total_pipeline:.3f} sec")

    except ValueError:
        print("🚨 Παρακαλώ δώσε έγκυρους αριθμούς (π.χ. 7.5, 1.5, 5000 κλπ)")


# 🔁 Εκκίνηση του προγράμματος
pipelining_with_total_message_input()
